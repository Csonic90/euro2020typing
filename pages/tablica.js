import React from 'react'
import {
  useAuthUser,
  withAuthUser,
  withAuthUserTokenSSR,
  AuthAction,
} from 'next-firebase-auth'
import Header from '../components/Header'
import DemoPageLinks from '../components/DemoPageLinks'
import getAbsoluteURL from '../utils/getAbsoluteURL'
import Head from 'next/head'
import db from '../utils/db';
import styles from '../styles/Home.module.css'




const Tablica = ({ userData, wyniki, mecze }) => {
  const AuthUser = useAuthUser()

  const todaysDate = new Date;

  return (
    <div className="container">
        <Head>
        <title>EURO 2020</title>
        <meta name="description" content="Generated by create next app" />
        <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.1/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-+0n0xVW2eSR5OomGNYDnhzAbDsOXxcvSN1TPprVMTNDbiYZCxYbOOl7+AMvyTG2x" crossOrigin="anonymous"></link>
        <link rel="icon" href="/favicon.ico" />
      </Head>
     
      <Header email={AuthUser.email} signOut={AuthUser.signOut} />
      <div style={styles.content}>
        <div className="tableall">
        <table className="  col overflow-x-auto   table-bordered">
               <thead className="thead-dark">
                 <th scope="col">Gracz\Mecz</th>
          {mecze.map( (mecz , id) => 
                <th key={id} scope="col">{mecz.slug}</th>

            )}
            </thead>
            <tbody>
            
            {userData.map((user,ids) => 
            <tr>

              <td>{user.name}</td>
              {mecze.map( (mecz , id) => 
              <>{wyniki
              .filter(wynik => wynik.id_user == user.id_auth && wynik.mecz_id == mecz.id) 
              .map(wynik => 
                  <td>{(Date.parse(mecz.blokada) > todaysDate ) ? 'ukryty'  : (wynik.wynik_1 + '-'+ wynik.wynik_2) }</td>
                
                  
                  )}</>)}
            </tr>
              )}
           
            </tbody>
          </table>
        </div>
        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.1/dist/js/bootstrap.bundle.min.js" integrity="sha384-gtEjrD/SeCtmISkJkNUaaKMoLD0//ElJ19smozuHV6z3Iehds+3Ulb9Bn9Plx0x4" crossOrigin="anonymous"></script>

      </div>
    </div>
  )
}

export const getServerSideProps = withAuthUserTokenSSR({
  whenUnauthed: AuthAction.REDIRECT_TO_LOGIN,
})(async ({ AuthUser, req }) => {
  // Optionally, get other props.
  const token = await AuthUser.getIdToken()
  const endpoint = getAbsoluteURL('/api/example', req)
  const users = await db.collection('users').orderBy('created', 'asc').get();

  const userwynik = await db.collection('wyniks').orderBy('created', 'asc').get();
  const meczes = await db.collection('meczes').orderBy('created', 'asc').get();


  const response = await fetch(endpoint, {
    method: 'GET',
    headers: {
      Authorization: token || 'unauthenticated',
    },
  })
  const data = await response.json()
  if (!response.ok) {
    throw new Error(
      `Data fetching failed with status ${response.status}: ${JSON.stringify(
        data
      )}`
    )
  }
  const userData = users.docs.map(usr => ({
    id: usr.id,
    ...usr.data()
  }));

  const wynikiData = userwynik.docs.map(wynik => ({
    id: wynik.id,
    ...wynik.data()
  }));

  const meczeData = meczes.docs.map(mecz => ({
    id: mecz.id,
    ...mecz.data()
  }));

  return {
    props: {
      favoriteColor: data.favoriteColor,
      userData: userData,
      wyniki: wynikiData,
      mecze: meczeData
    },
  }
})

export default withAuthUser({
  whenUnauthedAfterInit: AuthAction.REDIRECT_TO_LOGIN,
})(Tablica)
